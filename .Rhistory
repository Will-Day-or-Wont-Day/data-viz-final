df_storms %>%
filter(year(strt_dt) == 2020,
state == "CALIFORNIA") %>%
View(.)
df_storms %>%
filter(year(strt_dt) == 2020,
STATE == "CALIFORNIA") %>%
View(.)
df_storms %>%
filter(year(strt_dt) == 2020,
month(strt_dt) == 8,
STATE == "CALIFORNIA") %>%
View(.)
df_storms %>%
filter(year(strt_dt) == 2020,
month(strt_dt) == 9,
STATE == "CALIFORNIA") %>%
View(.)
# Final Project
library(tidyverse)
library(lubridate)
# set working directory based on active script
# https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
setwd(dirname(rstudioapi::getActiveDocumentContext() %>% .$path))
# 1. Data Wrangling
df_2010 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2010_c20220107.csv')
df_2011 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2011_c20220107.csv')
df_2012 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2012_c20220107.csv')
df_2013 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2013_c20220124.csv')
df_2014 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2014_c20211217.csv')
df_2015 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2015_c20211217.csv')
df_2016 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2016_c20211217.csv')
df_2017 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2017_c20220124.csv')
df_2018 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2018_c20220217.csv')
df_2019 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2019_c20220214.csv')
df_2020 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2020_c20220217.csv')
removes <- read.csv('Raw Data/NOAA/delete_cols_noaa.csv')
# create a for loop for removing columns
df <- rbind(df_2010, df_2011, df_2012, df_2013, df_2014, df_2015, df_2016,
df_2017, df_2018, df_2019, df_2020) %>%
select(-c('BEGIN_YEARMONTH', 'BEGIN_DAY', 'BEGIN_TIME', 'END_YEARMONTH',
'END_DAY', 'END_TIME', 'EVENT_ID', 'YEAR', 'MONTH_NAME', 'WFO',
'CZ_TIMEZONE', 'MAGNITUDE', 'MAGNITUDE_TYPE', 'FLOOD_CAUSE',
'CATEGORY', 'TOR_F_SCALE', 'TOR_LENGTH', 'TOR_WIDTH', 'TOR_OTHER_WFO',
'TOR_OTHER_CZ_STATE', 'TOR_OTHER_CZ_FIPS', 'TOR_OTHER_CZ_NAME',
'BEGIN_AZIMUTH', 'END_AZIMUTH', 'BEGIN_RANGE', 'END_RANGE',
'EVENT_NARRATIVE', 'DATA_SOURCE'))
df_extra <- df %>%
mutate(thousands_check = str_match(DAMAGE_PROPERTY, "K$"),
millions_check = str_match(DAMAGE_PROPERTY, "M$"))
df_extra %>%
filter(EVENT_TYPE == "Wildfire",
thousands_check == T | millions_check == T) %>%
arrange(desc(DAMAGE_PROPERTY)) %>%
View(.)
df_extra %>%
filter(EVENT_TYPE == "Wildfire",
thousands_check == T)
unique(df_extra$EVENT_TYPE)
df_extra <- df %>%
mutate(thousands_check = str_detect(DAMAGE_PROPERTY, "K$"),
millions_check = str_detect(DAMAGE_PROPERTY, "M$"))
df_extra %>%
filter(EVENT_TYPE == "Wildfire",
thousands_check == T)
df_extra %>%
filter(EVENT_TYPE == "Wildfire",
thousands_check == T | millions_check == T) %>%
arrange(desc(PROPERTY_DAMAGE)) %>%
View(.)
df_extra %>%
filter(EVENT_TYPE == "Wildfire",
thousands_check == T | millions_check == T) %>%
View(.)
df %>%
mutate(begin_dt = dmy(str_sub(BEGIN_DATE_TIME, 1, 9)),
end_dt = dmy(str_sub(END_DATE_TIME, 1, 9)),
property_dmg = replace_na(as.numeric(str_remove(DAMAGE_PROPERTY, "K$")), 0),
crop_dmg = replace_na(as.numeric(str_remove(DAMAGE_CROPS, "K$")), 0)) %>%
filter(EPISODE_ID == 153171) %>%
View(.)
unique(str_match_all(df$PROPERTY_DAMAGE, "\\w$"))
str_match_all(df$PROPERTY_DAMAGE, "\\w$")
str_match_all(df$PROPERTY_DAMAGE, "\\w$") %>% View(.)
?str_match_all
str_match(df$PROPERTY_DAMAGE, "\\w$")
str_match(df$PROPERTY_DAMAGE, "[abc]$")
str_match(df$PROPERTY_DAMAGE, "K$")
str_match(df$PROPERTY_DAMAGE, "M$")
str_match(df$DAMAGE_PROPERTY, "M$")
unique(str_match(df$DAMAGE_PROPERTY, "M$"))
unique(str_match(df$DAMAGE_PROPERTY, "[abc]$"))
unique(str_match(df$DAMAGE_PROPERTY, "\\w$"))
unique(str_match(df$DAMAGE_PROPERTY, "\\d$"))
# convert dates to datetime format, convert damage from string to numeric
df_cln <- df %>%
mutate(begin_dt = dmy(str_sub(BEGIN_DATE_TIME, 1, 9)),
end_dt = dmy(str_sub(END_DATE_TIME, 1, 9)),
prop_thsnd_ind = str_detect(DAMAGE_PROPERTY, "K$"),
prop_mlln_ind = str_detect(DAMAGE_PROPERTY, "M$"),
prop_blln_ind = str_detect(DAMAGE_PROPERTY, "B$"),
crop_thsnd_ind = str_detect(DAMAGE_CROPS, "K$"),
crop_mlln_ind = str_detect(DAMAGE_CROPS, "M$"),
crop_blln_ind = str_detect(DAMAGE_CROPS, "B$"),
dmg_property = replace_na(as.numeric(str_remove(DAMAGE_PROPERTY, "K$" | "M$" | "B$")), 0),
dmg_crops = replace_na(as.numeric(str_remove(DAMAGE_CROPS, "K$" | "M$" | "B$")), 0)) %>%
# starting a mutate just to retain readability on property damage
mutate(dmg_property = case_when(prop_thsnd_ind == T ~ dmg_property * 1000,
prop_mlln_ind == T ~ dmg_property * 1000000,
prop_blln_ind == T ~ dmg_property * 1000000000,
T ~ dmg_property),
dmg_crops = case_when(crop_thsnd_ind == T ~ dmg_crops * 1000,
crop_mlln_ind == T ~ dmg_crops * 1000000,
crop_blln_ind == T ~ dmg_crops * 1000000000,
T ~ dmg_crops))
# convert dates to datetime format, convert damage from string to numeric
df_cln <- df %>%
mutate(begin_dt = dmy(str_sub(BEGIN_DATE_TIME, 1, 9)),
end_dt = dmy(str_sub(END_DATE_TIME, 1, 9)),
prop_thsnd_ind = str_detect(DAMAGE_PROPERTY, "K$"),
prop_mlln_ind = str_detect(DAMAGE_PROPERTY, "M$"),
prop_blln_ind = str_detect(DAMAGE_PROPERTY, "B$"),
crop_thsnd_ind = str_detect(DAMAGE_CROPS, "K$"),
crop_mlln_ind = str_detect(DAMAGE_CROPS, "M$"),
crop_blln_ind = str_detect(DAMAGE_CROPS, "B$"),
dmg_property = replace_na(as.numeric(str_remove(DAMAGE_PROPERTY, "[KMB]$")), 0),
dmg_crops = replace_na(as.numeric(str_remove(DAMAGE_CROPS, "[KMB]$")), 0)) %>%
# starting a mutate just to retain readability on property damage
mutate(dmg_property = case_when(prop_thsnd_ind == T ~ dmg_property * 1000,
prop_mlln_ind == T ~ dmg_property * 1000000,
prop_blln_ind == T ~ dmg_property * 1000000000,
T ~ dmg_property),
dmg_crops = case_when(crop_thsnd_ind == T ~ dmg_crops * 1000,
crop_mlln_ind == T ~ dmg_crops * 1000000,
crop_blln_ind == T ~ dmg_crops * 1000000000,
T ~ dmg_crops))
df_cln %>%
filter(str_detect(DAMAGE_PROPERTY, "K$")) %>%
head(50) %>%
View(.)
df_cln %>%
filter(str_detect(DAMAGE_PROPERTY, "K$")) %>%
select(DAMAGE_PROPERTY, DAMAGE_CROPS, dmg_property, dmg_crops) %>%
head(50) %>%
View(.)
df_cln %>%
filter(str_detect(DAMAGE_CROPS, "K$")) %>%
select(DAMAGE_PROPERTY, DAMAGE_CROPS, dmg_property, dmg_crops) %>%
head(50) %>%
View(.)
df_cln %>%
filter(str_detect(DAMAGE_CROPS, "K$")) %>%
select(DAMAGE_PROPERTY, DAMAGE_CROPS, dmg_property, dmg_crops) %>%
arrange(desc(dmg_crops)) %>%
head(50) %>%
View(.)
df_cln %>%
filter(str_detect(DAMAGE_CROPS, "M$")) %>%
select(DAMAGE_PROPERTY, DAMAGE_CROPS, dmg_property, dmg_crops) %>%
arrange(desc(dmg_crops)) %>%
head(50) %>%
View(.)
df_cln %>%
filter(str_detect(DAMAGE_CROPS, "B$")) %>%
select(DAMAGE_PROPERTY, DAMAGE_CROPS, dmg_property, dmg_crops) %>%
arrange(desc(dmg_crops)) %>%
head(50) %>%
View(.)
df_cln %>%
filter(str_detect(DAMAGE_PROPERTY, "B$")) %>%
select(DAMAGE_PROPERTY, DAMAGE_CROPS, dmg_property, dmg_crops) %>%
arrange(desc(dmg_crops)) %>%
head(50) %>%
View(.)
df_cln %>%
filter(str_detect(DAMAGE_PROPERTY, "B$")) %>%
select(DAMAGE_PROPERTY, DAMAGE_CROPS, dmg_property, dmg_crops) %>%
arrange(desc(dmg_crops)) %>%
head(50) %>%
summarize(sum(dmg_property)) %>%
View(.)
# Final Project
library(tidyverse)
library(lubridate)
# set working directory based on active script
# https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
setwd(dirname(rstudioapi::getActiveDocumentContext() %>% .$path))
# 1. Data Wrangling
df_2010 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2010_c20220107.csv')
df_2011 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2011_c20220107.csv')
df_2012 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2012_c20220107.csv')
df_2013 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2013_c20220124.csv')
df_2014 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2014_c20211217.csv')
df_2015 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2015_c20211217.csv')
df_2016 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2016_c20211217.csv')
df_2017 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2017_c20220124.csv')
df_2018 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2018_c20220217.csv')
df_2019 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2019_c20220214.csv')
df_2020 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2020_c20220217.csv')
removes <- read.csv('Raw Data/NOAA/delete_cols_noaa.csv')
# create a for loop for removing columns
df <- rbind(df_2010, df_2011, df_2012, df_2013, df_2014, df_2015, df_2016,
df_2017, df_2018, df_2019, df_2020) %>%
select(-c('BEGIN_YEARMONTH', 'BEGIN_DAY', 'BEGIN_TIME', 'END_YEARMONTH',
'END_DAY', 'END_TIME', 'EVENT_ID', 'YEAR', 'MONTH_NAME', 'WFO',
'CZ_TIMEZONE', 'MAGNITUDE', 'MAGNITUDE_TYPE', 'FLOOD_CAUSE',
'CATEGORY', 'TOR_F_SCALE', 'TOR_LENGTH', 'TOR_WIDTH', 'TOR_OTHER_WFO',
'TOR_OTHER_CZ_STATE', 'TOR_OTHER_CZ_FIPS', 'TOR_OTHER_CZ_NAME',
'BEGIN_AZIMUTH', 'END_AZIMUTH', 'BEGIN_RANGE', 'END_RANGE',
'EVENT_NARRATIVE', 'DATA_SOURCE'))
df_extra <- df %>%
mutate(thousands_check = str_detect(DAMAGE_PROPERTY, "K$"),
millions_check = str_detect(DAMAGE_PROPERTY, "M$"))
df_extra %>%
filter(EVENT_TYPE == "Wildfire",
thousands_check == T | millions_check == T) %>%
View(.)
# convert dates to datetime format, convert damage from string to numeric
# trickily, NOAA encodes property damages in thousands, millions and trillions
# in order to get them on the same level, we created an indicator for each
# encoding type, stripped the trailing alpha characters, then multiplied the
# resulting number 1k, 1m, or 1b depending on which indicator it possessed
df_cln <- df %>%
mutate(begin_dt = dmy(str_sub(BEGIN_DATE_TIME, 1, 9)),
end_dt = dmy(str_sub(END_DATE_TIME, 1, 9)),
prop_thsnd_ind = str_detect(DAMAGE_PROPERTY, "K$"),
prop_mlln_ind = str_detect(DAMAGE_PROPERTY, "M$"),
prop_blln_ind = str_detect(DAMAGE_PROPERTY, "B$"),
crop_thsnd_ind = str_detect(DAMAGE_CROPS, "K$"),
crop_mlln_ind = str_detect(DAMAGE_CROPS, "M$"),
crop_blln_ind = str_detect(DAMAGE_CROPS, "B$"),
dmg_property = replace_na(as.numeric(str_remove(DAMAGE_PROPERTY, "[KMB]$")), 0),
dmg_crops = replace_na(as.numeric(str_remove(DAMAGE_CROPS, "[KMB]$")), 0)) %>%
# starting a mutate just to retain readability on property damage
mutate(dmg_property = case_when(prop_thsnd_ind == T ~ dmg_property * 1000,
prop_mlln_ind == T ~ dmg_property * 1000000,
prop_blln_ind == T ~ dmg_property * 1000000000,
T ~ dmg_property),
dmg_crops = case_when(crop_thsnd_ind == T ~ dmg_crops * 1000,
crop_mlln_ind == T ~ dmg_crops * 1000000,
crop_blln_ind == T ~ dmg_crops * 1000000000,
T ~ dmg_crops))
# collapse to a county/episode/event type level
df_summ <- df_cln %>%
group_by(EPISODE_ID, EPISODE_NARRATIVE, STATE, STATE_FIPS, EVENT_TYPE,
CZ_TYPE, CZ_FIPS, CZ_NAME) %>%
summarize(strt_dt = min(begin_dt),
end_dt = max(end_dt),
injuries_direct = sum(INJURIES_DIRECT),
injuries_indirect = sum(INJURIES_INDIRECT),
deaths_direct = sum(DEATHS_DIRECT),
deaths_indirect = sum(DEATHS_INDIRECT),
dmg_property = sum(dmg_property),
dmg_crops = sum(dmg_crops))
saveRDS(df_summ, "Cleaned Data/storm_data_episodes.rds")
# collapse to a county/episode/event type level
df_summ <- df_cln %>%
group_by(EPISODE_ID, EPISODE_NARRATIVE, STATE, STATE_FIPS, EVENT_TYPE,
CZ_TYPE, CZ_FIPS, CZ_NAME) %>%
summarize(strt_dt = min(begin_dt),
end_dt = max(end_dt),
injuries_direct = sum(INJURIES_DIRECT),
injuries_indirect = sum(INJURIES_INDIRECT),
deaths_direct = sum(DEATHS_DIRECT),
deaths_indirect = sum(DEATHS_INDIRECT),
dmg_property = sum(dmg_property),
dmg_crops = sum(dmg_crops)) %>%
ungroup()
saveRDS(df_summ, "Cleaned Data/storm_data_episodes.rds")
library(tidyverse)
library(lubridate)
# set working directory based on active script
# https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
setwd(dirname(rstudioapi::getActiveDocumentContext() %>% .$path))
df_storms <- readRDS("data/storm_data_episodes.rds")
df_gdp <- readRDS("data/gdp_bea.rds")
# summarize events on county/year/event type level
df_storms_year <- df_storms %>%
mutate(year = year(strt_dt)) %>%
group_by(STATE, CZ_NAME, STATE_FIPS, CZ_FIPS, year,
EVENT_TYPE) %>%
summarize(injuries_direct = sum(injuries_direct),
injuries_indirect = sum(injuries_indirect),
deaths_direct = sum(deaths_direct),
deaths_indirect = sum(deaths_indirect),
dmg_property = sum(dmg_property),
dmg_crops = sum(dmg_crops),
episode_cnt = n())
# create a dataset w/ data from major weather types
unique(df_storms_year$EVENT_TYPE) %>%
case_when(EVENT_TYPE %in% c("Flood", "Flash Flood", "Coastal Flood", "Lakeshore Flood"))
# create indicators for each type of damage
df_storms_ind <- df_storms %>%
mutate(flood_ind = EVENT_TYPE %in% c("Flood", "Flash Flood", "Coastal Flood", "Lakeshore Flood"),
tornado_wind_ind = EVENT_TYPE %in% c("Thunderstorm Wind", "Tornado", "Strong Wind", "High Wind"),
hurricane_ind = EVENT_TYPE %in% c("Tropical Depression", "Tropical Storm", "Hurricane", "Hurricane (Typhoon)"),
wildfire_ind = EVENT_TYPE %in% c("Wildfire"))
df_storms_dmg <- df_storms_ind %>%
group_by(STATE_FIPS, CZ_FIPS, EPISODE_ID) %>%
mutate(flood_dmg = dmg_property * flood_ind,
tornado_wind_dmg = dmg_property * tornado_wind_ind,
wildfire_dmg = dmg_property * wildfire_ind,
hurricane_dmg = dmg_property * max(hurricane_ind)) %>%
group_by(STATE_FIPS, CZ_FIPS) %>%
summarize(across(flood_dmg:hurricane_dmg, sum)) %>%
mutate(geofips = paste0(str_pad(STATE_FIPS, 2, "left", "0"), str_pad(CZ_FIPS, 3, "left", "0")))
flood_dmg <- df_storms_dmg$flood_dmg
tornado_wind_dmg <- df_storms_dmg$tornado_wind_dmg
hurricane_dmg <- df_storms_dmg$hurricane_dmg
wildfire_dmg <- df_storms_dmg$wildfire_dmg
flood_dist <- ecdf(flood_dmg)(flood_dmg)
tornado_wind_dist <- ecdf(tornado_wind_dmg)(tornado_wind_dmg)
hurricane_dist <- ecdf(hurricane_dmg)(hurricane_dmg)
wildfire_dist <- ecdf(wildfire_dmg)(wildfire_dmg)
df_storms_dmg <- df_storms_dmg %>%
ungroup() %>%
mutate(flood_dist = flood_dist,
tornado_wind_dist = tornado_wind_dist,
hurricane_dist = hurricane_dist,
wildfire_dist = wildfire_dist)
write_csv(df_storms_dmg, "storm_dmg_cnty.csv")
library(tidyverse)
library(lubridate)
# set working directory based on active script
# https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
setwd(dirname(rstudioapi::getActiveDocumentContext() %>% .$path))
df_storms <- readRDS("data/storm_data_episodes.rds")
df_gdp <- readRDS("data/gdp_bea.rds")
# summarize events on county/year/event type level
df_storms_year <- df_storms %>%
mutate(year = year(strt_dt)) %>%
group_by(STATE, CZ_NAME, STATE_FIPS, CZ_FIPS, year,
EVENT_TYPE) %>%
summarize(injuries_direct = sum(injuries_direct),
injuries_indirect = sum(injuries_indirect),
deaths_direct = sum(deaths_direct),
deaths_indirect = sum(deaths_indirect),
dmg_property = sum(dmg_property),
dmg_crops = sum(dmg_crops),
episode_cnt = n())
# create a dataset w/ data from major weather types
unique(df_storms_year$EVENT_TYPE) %>%
case_when(EVENT_TYPE %in% c("Flood", "Flash Flood", "Coastal Flood", "Lakeshore Flood"))
# create indicators for each type of damage
df_storms_ind <- df_storms %>%
mutate(flood_ind = EVENT_TYPE %in% c("Flood", "Flash Flood", "Coastal Flood", "Lakeshore Flood"),
tornado_wind_ind = EVENT_TYPE %in% c("Thunderstorm Wind", "Tornado", "Strong Wind", "High Wind"),
hurricane_ind = EVENT_TYPE %in% c("Tropical Depression", "Tropical Storm", "Hurricane", "Hurricane (Typhoon)"),
wildfire_ind = EVENT_TYPE %in% c("Wildfire"))
df_storms_dmg <- df_storms_ind %>%
group_by(STATE_FIPS, CZ_FIPS, EPISODE_ID) %>%
mutate(flood_dmg = dmg_property * flood_ind,
tornado_wind_dmg = dmg_property * tornado_wind_ind,
wildfire_dmg = dmg_property * wildfire_ind,
hurricane_dmg = dmg_property * max(hurricane_ind)) %>%
group_by(STATE_FIPS, CZ_FIPS) %>%
summarize(across(flood_dmg:hurricane_dmg, sum)) %>%
mutate(geofips = paste0(str_pad(STATE_FIPS, 2, "left", "0"), str_pad(CZ_FIPS, 3, "left", "0")))
# flood_dmg <- df_storms_dmg$flood_dmg
# tornado_wind_dmg <- df_storms_dmg$tornado_wind_dmg
# hurricane_dmg <- df_storms_dmg$hurricane_dmg
# wildfire_dmg <- df_storms_dmg$wildfire_dmg
#
# flood_dist <- ecdf(flood_dmg)(flood_dmg)
# tornado_wind_dist <- ecdf(tornado_wind_dmg)(tornado_wind_dmg)
# hurricane_dist <- ecdf(hurricane_dmg)(hurricane_dmg)
# wildfire_dist <- ecdf(wildfire_dmg)(wildfire_dmg)
#
# df_storms_dmg <- df_storms_dmg %>%
#   ungroup() %>%
#   mutate(flood_dist = flood_dist,
#          tornado_wind_dist = tornado_wind_dist,
#          hurricane_dist = hurricane_dist,
#          wildfire_dist = wildfire_dist)
write_csv(df_storms_dmg, "storm_dmg_cnty.csv")
wldfr_dmg <- df_storms_dmg %>%
filter(wildfire_dmg > 0) %>%
.$wildfire_dmg
quantile(wldfr_dmg, c(0, 0.2, 0.4, 0.6, 0.8))
df_storms %>%
filter(year(strt_dt) == 2020,
month(strt_dt) == 9,
STATE == "CALIFORNIA") %>%
View(.)
# Final Project
library(tidyverse)
library(lubridate)
# set working directory based on active script
# https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
setwd(dirname(rstudioapi::getActiveDocumentContext() %>% .$path))
# 1. Data Wrangling
df_2010 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2010_c20220107.csv')
df_2011 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2011_c20220107.csv')
df_2012 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2012_c20220107.csv')
df_2013 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2013_c20220124.csv')
df_2014 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2014_c20211217.csv')
df_2015 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2015_c20211217.csv')
df_2016 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2016_c20211217.csv')
df_2017 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2017_c20220124.csv')
df_2018 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2018_c20220217.csv')
df_2019 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2019_c20220214.csv')
df_2020 <- read.csv('Raw Data/NOAA/StormEvents_details-ftp_v1.0_d2020_c20220217.csv')
removes <- read.csv('Raw Data/NOAA/delete_cols_noaa.csv')
# create a for loop for removing columns
df <- rbind(df_2010, df_2011, df_2012, df_2013, df_2014, df_2015, df_2016,
df_2017, df_2018, df_2019, df_2020) %>%
select(-c('BEGIN_YEARMONTH', 'BEGIN_DAY', 'BEGIN_TIME', 'END_YEARMONTH',
'END_DAY', 'END_TIME', 'EVENT_ID', 'YEAR', 'MONTH_NAME', 'WFO',
'CZ_TIMEZONE', 'MAGNITUDE', 'MAGNITUDE_TYPE', 'FLOOD_CAUSE',
'CATEGORY', 'TOR_F_SCALE', 'TOR_LENGTH', 'TOR_WIDTH', 'TOR_OTHER_WFO',
'TOR_OTHER_CZ_STATE', 'TOR_OTHER_CZ_FIPS', 'TOR_OTHER_CZ_NAME',
'BEGIN_AZIMUTH', 'END_AZIMUTH', 'BEGIN_RANGE', 'END_RANGE',
'EVENT_NARRATIVE', 'DATA_SOURCE'))
# convert dates to datetime format, convert damage from string to numeric
# trickily, NOAA encodes property damages in thousands, millions and trillions
# in order to get them on the same level, we created an indicator for each
# encoding type, stripped the trailing alpha characters, then multiplied the
# resulting number 1k, 1m, or 1b depending on which indicator it possessed
df_cln <- df %>%
mutate(begin_dt = dmy(str_sub(BEGIN_DATE_TIME, 1, 9)),
end_dt = dmy(str_sub(END_DATE_TIME, 1, 9)),
prop_thsnd_ind = str_detect(DAMAGE_PROPERTY, "K$"),
prop_mlln_ind = str_detect(DAMAGE_PROPERTY, "M$"),
prop_blln_ind = str_detect(DAMAGE_PROPERTY, "B$"),
crop_thsnd_ind = str_detect(DAMAGE_CROPS, "K$"),
crop_mlln_ind = str_detect(DAMAGE_CROPS, "M$"),
crop_blln_ind = str_detect(DAMAGE_CROPS, "B$"),
dmg_property = replace_na(as.numeric(str_remove(DAMAGE_PROPERTY, "[KMB]$")), 0),
dmg_crops = replace_na(as.numeric(str_remove(DAMAGE_CROPS, "[KMB]$")), 0)) %>%
# starting a mutate just to retain readability on property damage
mutate(dmg_property = case_when(prop_thsnd_ind == T ~ dmg_property * 1000,
prop_mlln_ind == T ~ dmg_property * 1000000,
prop_blln_ind == T ~ dmg_property * 1000000000,
T ~ dmg_property),
dmg_crops = case_when(crop_thsnd_ind == T ~ dmg_crops * 1000,
crop_mlln_ind == T ~ dmg_crops * 1000000,
crop_blln_ind == T ~ dmg_crops * 1000000000,
T ~ dmg_crops))
df_cln %>% filter(EVENT_TYPE == "Wildfire") %>% View(.)
library(tidyverse)
library(lubridate)
# set working directory based on active script
# https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
setwd(dirname(rstudioapi::getActiveDocumentContext() %>% .$path))
df_storms <- readRDS("data/storm_data_episodes.rds")
df_gdp <- readRDS("data/gdp_bea.rds")
# summarize events on county/year/event type level
df_storms_year <- df_storms %>%
mutate(year = year(strt_dt)) %>%
group_by(STATE, CZ_NAME, STATE_FIPS, CZ_FIPS, year,
EVENT_TYPE) %>%
summarize(injuries_direct = sum(injuries_direct),
injuries_indirect = sum(injuries_indirect),
deaths_direct = sum(deaths_direct),
deaths_indirect = sum(deaths_indirect),
dmg_property = sum(dmg_property),
dmg_crops = sum(dmg_crops),
episode_cnt = n())
# create a dataset w/ data from major weather types
unique(df_storms_year$EVENT_TYPE) %>%
case_when(EVENT_TYPE %in% c("Flood", "Flash Flood", "Coastal Flood", "Lakeshore Flood"))
# create indicators for each type of damage
df_storms_ind <- df_storms %>%
mutate(flood_ind = EVENT_TYPE %in% c("Flood", "Flash Flood", "Coastal Flood", "Lakeshore Flood"),
tornado_wind_ind = EVENT_TYPE %in% c("Thunderstorm Wind", "Tornado", "Strong Wind", "High Wind"),
hurricane_ind = EVENT_TYPE %in% c("Tropical Depression", "Tropical Storm", "Hurricane", "Hurricane (Typhoon)"),
wildfire_ind = EVENT_TYPE %in% c("Wildfire"))
state.abb
state.name
state_lookup <- tibble(st_name = state.name, st_postal = state.abb)
View(state_lookup)
unique(df_storms_ind$STATE)
arrange(unique(df_storms_ind$STATE))
order(unique(df_storms_ind$STATE))
state_lookup <- tibble(st_name = c(state.name, "District of Columbia"), st_postal = c(state.abb, "DC"))
View(state_lookup)
state_lookup <- tibble(st_name = c(state.name, "District of columbia"), st_postal = c(state.abb, "DC"))
state_lookup <- tibble(st_name = str_to_upper(c(state.name, "District of Columbia")), st_postal = c(state.abb, "DC"))
# create indicators for each type of damage
df_storms_ind <- df_storms %>%
mutate(flood_ind = EVENT_TYPE %in% c("Flood", "Flash Flood", "Coastal Flood", "Lakeshore Flood"),
tornado_wind_ind = EVENT_TYPE %in% c("Thunderstorm Wind", "Tornado", "Strong Wind", "High Wind"),
hurricane_ind = EVENT_TYPE %in% c("Tropical Depression", "Tropical Storm", "Hurricane", "Hurricane (Typhoon)"),
wildfire_ind = EVENT_TYPE %in% c("Wildfire")) %>%
left_join(state_lookup, by = c("STATE" = "st_name"))
df_storms_ind %>% group_by(STATE, state.name) %>% tally()
df_storms_ind %>% group_by(STATE, st_postal) %>% tally()
df_storms_ind %>% group_by(STATE, st_postal) %>% tally() %>% View(.)
df_storms_dmg <- df_storms_ind %>%
group_by(STATE_FIPS, CZ_FIPS, EPISODE_ID, st_postal) %>%
mutate(flood_dmg = dmg_property * flood_ind,
tornado_wind_dmg = dmg_property * tornado_wind_ind,
wildfire_dmg = dmg_property * wildfire_ind,
hurricane_dmg = dmg_property * max(hurricane_ind)) %>%
group_by(STATE_FIPS, CZ_FIPS, st_postal) %>%
summarize(across(flood_dmg:hurricane_dmg, sum)) %>%
mutate(geofips = paste0(str_pad(STATE_FIPS, 2, "left", "0"), str_pad(CZ_FIPS, 3, "left", "0")),
geofips_nws = paste0(st_postal, str_pad(CZ_FIPS, 3, "left", "0")))
View(df_storms_dmg)
write_csv(df_storms_dmg, "storm_dmg_cnty.csv")
wldfr_dmg <- df_storms_dmg %>%
filter(wildfire_dmg > 0) %>%
.$wildfire_dmg
quantile(wldfr_dmg, c(0, 0.2, 0.4, 0.6, 0.8))
dmg <- df_storms_dmg %>%
filter(wildfire_dmg > 0) %>%
.$hurricane_dmg
quantile(dmg, c(0, 0.2, 0.4, 0.6, 0.8))
dmg <- df_storms_dmg %>%
filter(hurricane_dmg > 0) %>%
.$hurricane_dmg
quantile(dmg, c(0, 0.2, 0.4, 0.6, 0.8))
